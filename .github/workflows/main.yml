name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.8.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Poetry installation
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-${{ env.POETRY_VERSION }}-${{ runner.os }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: poetry-deps-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-deps-${{ env.PYTHON_VERSION }}-
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        
    - name: Run unit tests
      run: |
        poetry run pytest tests/ -v --cov=src/propcorn_ratelimiter --cov-report=xml --cov-report=term-missing --ignore=tests/test_visualization.py
        
    - name: Run visualization tests (generates results)
      run: |
        poetry run pytest tests/test_visualization.py -v
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          results/
          coverage.xml
        retention-days: 30
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t propcorn-ratelimiter:latest .
        
    - name: Test Docker image
      run: |
        # Start Redis for testing
        docker run -d --name test-redis -p 6380:6379 redis:7-alpine
        
        # Start the application
        docker run -d --name test-app -p 8001:8000 \
          -e REDIS_HOST=host.docker.internal \
          -e REDIS_PORT=6380 \
          --add-host=host.docker.internal:host-gateway \
          propcorn-ratelimiter:latest
        
        # Wait for the app to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8001/health || (docker logs test-app && exit 1)
        
        # Clean up
        docker stop test-app test-redis
        docker rm test-app test-redis
        
  deploy:
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          
          # Navigate to application directory
          cd ${{ secrets.EC2_APP_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Stop existing containers gracefully
          docker-compose -f docker-compose.prod.yml down --timeout 30 || true
          
          # Remove old images to free space
          docker image prune -f || true
          
          # Build and start new containers
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          sleep 45
          
          # Verify deployment with retries
          for i in {1..5}; do
            if curl -f http://localhost:8000/health; then
              echo "Deployment completed successfully!"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          
          echo "Deployment verification failed!"
          docker-compose -f docker-compose.prod.yml logs
          exit 1
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to EC2 completed successfully"
        else
          echo "❌ Deployment to EC2 failed"
        fi 